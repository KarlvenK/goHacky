// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHuman is a mock of Human interface.
type MockHuman struct {
	ctrl     *gomock.Controller
	recorder *MockHumanMockRecorder
}

// MockHumanMockRecorder is the mock recorder for MockHuman.
type MockHumanMockRecorder struct {
	mock *MockHuman
}

// NewMockHuman creates a new mock instance.
func NewMockHuman(ctrl *gomock.Controller) *MockHuman {
	mock := &MockHuman{ctrl: ctrl}
	mock.recorder = &MockHumanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHuman) EXPECT() *MockHumanMockRecorder {
	return m.recorder
}

// Eat mocks base method.
func (m *MockHuman) Eat() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eat")
	ret0, _ := ret[0].(string)
	return ret0
}

// Eat indicates an expected call of Eat.
func (mr *MockHumanMockRecorder) Eat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eat", reflect.TypeOf((*MockHuman)(nil).Eat))
}

// Get mocks base method.
func (m *MockHuman) Get(arg0 string, arg1 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockHumanMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHuman)(nil).Get), arg0, arg1)
}

// Speak mocks base method.
func (m *MockHuman) Speak() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Speak")
	ret0, _ := ret[0].(string)
	return ret0
}

// Speak indicates an expected call of Speak.
func (mr *MockHumanMockRecorder) Speak() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Speak", reflect.TypeOf((*MockHuman)(nil).Speak))
}

// MockAnimal is a mock of Animal interface.
type MockAnimal struct {
	ctrl     *gomock.Controller
	recorder *MockAnimalMockRecorder
}

// MockAnimalMockRecorder is the mock recorder for MockAnimal.
type MockAnimalMockRecorder struct {
	mock *MockAnimal
}

// NewMockAnimal creates a new mock instance.
func NewMockAnimal(ctrl *gomock.Controller) *MockAnimal {
	mock := &MockAnimal{ctrl: ctrl}
	mock.recorder = &MockAnimalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnimal) EXPECT() *MockAnimalMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockAnimal) Run() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(string)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockAnimalMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockAnimal)(nil).Run))
}
